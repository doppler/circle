{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["width","document","getElementsByTagName","offsetWidth","App","_useState","useState","_useState2","Object","slicedToArray","angle","setAngle","_useState3","_useState4","coords","setCoords","_useState5","h","k","r","_useState6","params","setParams","resetParams","getElementById","useEffect","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","radian","Math","PI","x","cos","y","sin","react_default","a","createElement","className","id","style","backgroundImage","concat","transform","color","left","top","backgroundColor","App_Slider","handleAngleSliderChange","event","Number","target","value","JSON","stringify","Slider","_ref","type","min","max","onChange","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAEMA,SAAQC,SAASC,qBAAqB,QAAQ,GAAGC,aAsFxCC,EApFH,WAAM,IAAAC,EACUC,mBAAS,KADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACFI,EADEJ,EAAA,GAAAK,EAEYN,mBAAS,IAFrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAEDE,EAFCF,EAAA,GAAAG,EAGYV,mBAAS,CACnCW,EAAGjB,EAAQ,EACXkB,EAAGlB,EAAQ,EACXmB,EAAGnB,EAAQ,IANGoB,EAAAZ,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGTK,EAHSD,EAAA,GAGDE,EAHCF,EAAA,GAaVG,EAAc,WAClB,IAAMvB,EAAQC,SAASuB,eAAe,oBAAoBrB,YAC1DmB,EAAU,CACRL,EAAGjB,EAAQ,EACXkB,EAAGlB,EAAQ,EACXmB,EAAGnB,EAAQ,EAAI,KAInByB,oBAAU,WAGR,OAFAF,IACAG,OAAOC,iBAAiB,SAAUJ,GAC3B,kBAAMG,OAAOE,oBAAoB,SAAUL,KACjD,IAEH,IAIIM,EAgBJ,OAfAJ,oBAAU,WAIR,OAHAI,EAAQC,YAAY,WALpBnB,EAAmB,MAAVD,EAAgB,EAAIA,EAAQ,MAOlC,MACI,kBAAMqB,cAAcF,MAG7BJ,oBAAU,WACR,IAAIO,EAAUtB,EAAQuB,KAAKC,GAAM,IACjCnB,EAAU,CACRoB,EAAGd,EAAOJ,EAAII,EAAOF,EAAIc,KAAKG,IAAIJ,GAClCK,EAAGhB,EAAOH,EAAIG,EAAOF,EAAIc,KAAKK,IAAIN,MAEnC,CAACtB,IAGF6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OACEE,GAAG,mBACHC,MAAO,CACLC,gBAAe,mBAAAC,OAAqBpC,EAClC,GADa,oBAAAoC,OACQpC,EAAQ,IADhB,mBAIjB6B,EAAAC,EAAAC,cAAA,KACEG,MAAO,CACLG,UAAS,UAAAD,OAAYpC,EAAZ,QACTsC,MAAK,OAAAF,OAASpC,EAAQ,IAAjB,kBAHT,iBAQA6B,EAAAC,EAAAC,cAAA,OACEC,UAAU,MACVE,MAAO,CACLK,KAAI,QAAAH,OAAUhC,EAAOqB,EAAjB,aACJe,IAAG,QAAAJ,OAAUhC,EAAOuB,EAAjB,aACHc,gBAAe,OAAAL,OAASpC,EAAT,gBACfqC,UAAS,UAAAD,OAAYpC,EAAZ,YAIf6B,EAAAC,EAAAC,cAACW,EAAW,CAAE1C,QAAO2C,wBAlEO,SAAAC,GAC9B3C,EAAS4C,OAAOD,EAAME,OAAOC,WAkE3BlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UAAKiB,KAAKC,UAAU,CAAEjD,QAAOI,SAAQO,UAAU,KAAM,OAQvDuC,EAAS,SAAAC,GAAA,IAAGnD,EAAHmD,EAAGnD,MAAO2C,EAAVQ,EAAUR,wBAAV,OACbd,EAAAC,EAAAC,cAAA,SACEqB,KAAK,QACLL,MAAO/C,EACPqD,IAAK,EACLC,IAAK,IACLC,SAAUZ,KCpFMa,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASvE,SAASuB,eAAe,SD2H3C,kBAAmBiD,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5030d76d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nconst width = document.getElementsByTagName(\"body\")[0].offsetWidth;\n\nconst App = () => {\n  const [angle, setAngle] = useState(270);\n  const [coords, setCoords] = useState({});\n  const [params, setParams] = useState({\n    h: width / 2,\n    k: width / 2,\n    r: width / 2\n  });\n\n  const handleAngleSliderChange = event => {\n    setAngle(Number(event.target.value));\n  };\n\n  const resetParams = () => {\n    const width = document.getElementById(\"circle-container\").offsetWidth;\n    setParams({\n      h: width / 2,\n      k: width / 2,\n      r: width / 2 - 5\n    });\n  };\n\n  useEffect(() => {\n    resetParams();\n    window.addEventListener(\"resize\", resetParams);\n    return () => window.removeEventListener(\"resize\", resetParams);\n  }, []);\n\n  const changeAngle = () => {\n    setAngle(angle === 360 ? 0 : angle + 0.25);\n  };\n\n  let timer;\n  useEffect(() => {\n    timer = setInterval(() => {\n      changeAngle();\n    }, 41.6);\n    return () => clearInterval(timer);\n  });\n\n  useEffect(() => {\n    let radian = (angle * Math.PI) / 180;\n    setCoords({\n      x: params.h + params.r * Math.cos(radian),\n      y: params.k + params.r * Math.sin(radian)\n    });\n  }, [angle]);\n\n  return (\n    <div className=\"App\">\n      <div\n        id=\"circle-container\"\n        style={{\n          backgroundImage: `linear-gradient(${angle +\n            90}deg, black, hsl(${angle - 180}, 100%, 50%))`\n        }}\n      >\n        <p\n          style={{\n            transform: `rotate(${angle}deg)`,\n            color: `hsl(${angle - 120}, 100%, 50%)`\n          }}\n        >\n          Hello, World!\n        </p>\n        <div\n          className=\"dot\"\n          style={{\n            left: `calc(${coords.x}px - 5px)`,\n            top: `calc(${coords.y}px - 5px)`,\n            backgroundColor: `hsl(${angle}, 100%, 50%)`,\n            transform: `rotate(${angle}deg)`\n          }}\n        />\n      </div>\n      <Slider {...{ angle, handleAngleSliderChange }} />\n      <dl>\n        <dt>state</dt>\n        <dd>{JSON.stringify({ angle, coords, params }, null, 2)}</dd>\n      </dl>\n    </div>\n  );\n};\n\nexport default App;\n\nconst Slider = ({ angle, handleAngleSliderChange }) => (\n  <input\n    type=\"range\"\n    value={angle}\n    min={0}\n    max={359}\n    onChange={handleAngleSliderChange}\n  />\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}